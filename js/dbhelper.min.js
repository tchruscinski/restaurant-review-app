class DBHelper{static get DATABASE_RESTAURANT_URL(){const port=1337
return `http://localhost:${port}/restaurants`}
static get DATABASE_REVIEWS_URL(){const port=1337;return `http://localhost:${port}/reviews`}
static dbPromise(){return idb.open('restaurants-db',2,function(upgradeDb){switch(upgradeDb.oldVersion){case 0:upgradeDb.createObjectStore('restaurants',{keyPath:'id'});case 1:const reviewsStore=upgradeDb.createObjectStore('reviews',{keyPath:'id'});reviewsStore.createIndex('restaurant_id','restaurant_id')}})}
static fetchRestaurants(callback,id){let Url=DBHelper.DATABASE_RESTAURANT_URL;if(id){Url=Url+'/'+id}
fetch(Url).then(response=>{response.json().then(restaurants=>{callback(null,restaurants)})}).catch(error=>{callback(error,null)})}
static fetchRestaurantById(id,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const restaurant=restaurants.find(r=>r.id==id);if(restaurant){callback(null,restaurant)}else{callback('Restaurant does not exist',null)}}})}
static fetchRestaurantByCuisine(cuisine,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const results=restaurants.filter(r=>r.cuisine_type==cuisine);callback(null,results)}})}
static fetchRestaurantByNeighborhood(neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const results=restaurants.filter(r=>r.neighborhood==neighborhood);callback(null,results)}})}
static fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{let results=restaurants
if(cuisine!='all'){results=results.filter(r=>r.cuisine_type==cuisine)}
if(neighborhood!='all'){results=results.filter(r=>r.neighborhood==neighborhood)}
callback(null,results)}})}
static fetchNeighborhoods(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const neighborhoods=restaurants.map((v,i)=>restaurants[i].neighborhood)
const uniqueNeighborhoods=neighborhoods.filter((v,i)=>neighborhoods.indexOf(v)==i)
callback(null,uniqueNeighborhoods)}})}
static fetchCuisines(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const cuisines=restaurants.map((v,i)=>restaurants[i].cuisine_type)
const uniqueCuisines=cuisines.filter((v,i)=>cuisines.indexOf(v)==i)
callback(null,uniqueCuisines)}})}
static fetchReviewsById(id,callback){let Url=DBHelper.DATABASE_REVIEWS_URL;if(id){Url=Url+'/?restaurant_id='+id}
fetch(Url).then(response=>{if(!response.clone().ok&&!response.clone().redirected){throw "No reviews available"}
response.json().then(result=>{callback(null,result);this.dbPromise().then(db=>{if(!db){return}
let tx=db.transaction('reviews','readwrite');const reviewsStore=tx.objectStore('reviews');if(Array.isArray(result)){result.forEach(function(review){reviewsStore.put(review)})}else{store.put(result)}});return Promise.resolve(result)})}).catch(error=>{callback(error,null)})}
static addReview(review){let dataObj={name:'addReview',data:review,}
if(dataObj.data==null){return}
if(!navigator.onLine&&dataObj.name=='addReview'){DBHelper.submitWhenOnline(dataObj);return}
console.log(dataObj.data);let reviewToSend={'restaurant_id':review.restaurant_id,'name':review.name,'createdAt':review.createdAt,'updatedAt':review.updatedAt,'rating':review.rating,'comments':review.comments};let Url=DBHelper.DATABASE_REVIEWS_URL;fetch(Url,{method:'POST',body:JSON.stringify(reviewToSend),headers:new Headers({'Content-Type':'application/json'})}).then(response=>{const contentType=response.headers.get('Content-Type');if(contentType&&contentType.indexOf('application/json')!=-1){return response.json()}else{return'Fetch Successful'}}).catch(error=>{console.log(error)})}
static submitWhenOnline(dataObj){localStorage.setItem('data',JSON.stringify(dataObj.data));console.log('You\'ve got data stored in your Local Storage');window.addEventListener('online',(event)=>{let data=JSON.parse(localStorage.getItem('data'))});DBHelper.addReview(dataObj.data);localStorage.removeItem('data');console.log('Your Local Storage has been cleared')}
static urlForRestaurant(restaurant){return(`./restaurant.html?id=${restaurant.id}`)}
static imageUrlForRestaurant(restaurant){return(`/images_small/${restaurant.photograph}.webp`)}
static imageUrlForRestaurantmedium(restaurant){return(`/images_medium/${restaurant.photograph}.webp`)}
static imageUrlForRestaurantlargex2(restaurant){return(`/images_largex2/${restaurant.photograph}.jpg`)}
static imageUrlForRestaurantlargex1(restaurant){return(`/images_largex1/${restaurant.photograph}.jpg`)}
static mapMarkerForRestaurant(restaurant,map){const marker=new google.maps.Marker({position:restaurant.latlng,title:restaurant.name,url:DBHelper.urlForRestaurant(restaurant),map:map,animation:google.maps.Animation.DROP});return marker}}
