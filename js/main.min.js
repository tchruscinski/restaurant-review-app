let restaurants,neighborhoods,cuisines
var map
var markers=[]
document.addEventListener('DOMContentLoaded',(event)=>{fetchNeighborhoods();fetchCuisines();initMap()});fetchNeighborhoods=()=>{DBHelper.fetchNeighborhoods((error,neighborhoods)=>{if(error){console.error(error)}else{self.neighborhoods=neighborhoods;fillNeighborhoodsHTML()}})}
fillNeighborhoodsHTML=(neighborhoods=self.neighborhoods)=>{const select=document.getElementById('neighborhoods-select');neighborhoods.forEach(neighborhood=>{const option=document.createElement('option');option.innerHTML=neighborhood;option.value=neighborhood;option.setAttribute('aria-label','Select '+neighborhood+' neighborhood');select.append(option)})}
fetchCuisines=()=>{DBHelper.fetchCuisines((error,cuisines)=>{if(error){console.error(error)}else{self.cuisines=cuisines;fillCuisinesHTML()}})}
fillCuisinesHTML=(cuisines=self.cuisines)=>{const select=document.getElementById('cuisines-select');cuisines.forEach(cuisine=>{const option=document.createElement('option');option.innerHTML=cuisine;option.value=cuisine;option.setAttribute('aria-label','Select '+cuisine+' cuisine');select.append(option)})}
initMap=()=>{let loc={lat:40.722216,lng:-73.987501};self.map=new google.maps.Map(document.getElementById('map'),{zoom:12,center:loc,scrollwheel:!1});updateRestaurants()}
updateRestaurants=()=>{const cSelect=document.getElementById('cuisines-select');const nSelect=document.getElementById('neighborhoods-select');const cIndex=cSelect.selectedIndex;const nIndex=nSelect.selectedIndex;const cuisine=cSelect[cIndex].value;const neighborhood=nSelect[nIndex].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,(error,restaurants)=>{if(error){console.error(error)}else{resetRestaurants(restaurants);fillRestaurantsHTML()}})}
resetRestaurants=(restaurants)=>{self.restaurants=[];const ul=document.getElementById('restaurants-list');ul.innerHTML='';self.markers.forEach(m=>m.setMap(null));self.markers=[];self.restaurants=restaurants}
fillRestaurantsHTML=(restaurants=self.restaurants)=>{const ul=document.getElementById('restaurants-list');restaurants.forEach(restaurant=>{ul.append(createRestaurantHTML(restaurant))});addMarkersToMap()}
createRestaurantHTML=(restaurant)=>{const li=document.createElement('li');const image=document.createElement('img');image.alt='Photo taken in '+restaurant.name+' restaurant.';const options={threshold:0.1};let observer;if('IntersectionObserver' in window){observer=new IntersectionObserver(onChange,options);observer.observe(image)}else{console.log('Intersection Observers not supported','color: red');loadImage(image)}
const loadImage=image=>{image.className='restaurant-img';image.src=DBHelper.imageUrlForRestaurant(restaurant)}
function onChange(changes,observer){changes.forEach(change=>{if(change.intersectionRatio>0){loadImage(change.target);observer.unobserve(change.target)}})}
const picture=document.createElement('picture');const source1=document.createElement('source');const source2=document.createElement('source');const source3=document.createElement('source');picture.className='restaurant-img';source1.media='(min-width: 1000px) and (max-width: 1199px)';source2.media='(min-width: 1200px)';source3.media='(min-width: 520px) and (max-width: 749px)';source1.srcset=DBHelper.imageUrlForRestaurantmedium(restaurant);source2.srcset=DBHelper.imageUrlForRestaurant(restaurant);source3.srcset=DBHelper.imageUrlForRestaurantmedium(restaurant);picture.append(source1);picture.append(source2);picture.append(source3)
picture.append(image);li.append(picture)
const name=document.createElement('h2');name.innerHTML=restaurant.name;li.append(name);const neighborhood=document.createElement('p');neighborhood.innerHTML=restaurant.neighborhood;li.append(neighborhood);const address=document.createElement('p');address.innerHTML=restaurant.address;li.append(address);const more=document.createElement('a');more.innerHTML='View Details';more.href=DBHelper.urlForRestaurant(restaurant);more.setAttribute('aria-label','View more details about '+restaurant.name+' restaurant');li.append(more)
const favorite=document.createElement("button");favorite.className="favorite-button";favorite.innerHTML='❤';favorite.setAttribute('aria-label','Mark/Unmark the restaurant as favorite');favorite.onclick=function(){const isFavorite=!restaurant.is_favorite;DBHelper.updateFavoriteStatus(restaurant.id,isFavorite);restaurant.is_favorite=!restaurant.is_favorite
toggleFavorite(favorite,restaurant.is_favorite)};toggleFavorite(favorite,restaurant.is_favorite)
li.append(favorite);return li}
addMarkersToMap=(restaurants=self.restaurants)=>{restaurants.forEach(restaurant=>{const marker=DBHelper.mapMarkerForRestaurant(restaurant,self.map);google.maps.event.addListener(marker,'click',()=>{window.location.href=marker.url});self.markers.push(marker)})}
toggleFavorite=(el,favorite)=>{if(!favorite){el.classList.remove('favorite');el.classList.add('not-favorite');el.setAttribute('aria-label','Mark as favorite')}else{el.classList.remove('not-favorite');el.classList.add('favorite');el.setAttribute('aria-label','Remove favorite mark')}}
if(navigator.serviceWorker){navigator.serviceWorker.register('sw.js').then(()=>console.log('Service worker successfully registered.'))}
